# My R script for the Cyclistic Bikes Google Data Analytics Certificate Capstone

# installing required packages
install.packages("tidyverse")

# loading required packages
# tidyverse for data import and wrangling
# lubridate for data functions
# ggplot2 for data visualization
library(tidyverse)  #helps wrangle data
library(lubridate)  #helps wrangle date attributes
library(ggplot2)  #helps visualize data


#====================================================
# STEP 1: collecting the data
#====================================================
## reading the data for Dec 2020-Nov 2021


Dec_2020 <- read.csv("/202012-divvy-tripdata.csv")
Jan_2021 <- read.csv("/202101-divvy-tripdata.csv")
Feb_2021 <- read.csv("/202102-divvy-tripdata.csv")
Mar_2021 <- read.csv("/202103-divvy-tripdata.csv")
Apr_2021 <- read.csv("/202104-divvy-tripdata.csv")
May_2021 <- read.csv("/202105-divvy-tripdata.csv")
Jun_2021 <- read.csv("/202106-divvy-tripdata.csv")
Jul_2021 <- read.csv("/202107-divvy-tripdata.csv")
Aug_2021 <- read.csv("/202108-divvy-tripdata.csv")
Sep_2021 <- read.csv("/202109-divvy-tripdata.csv")
Oct_2021 <- read.csv("/202110-divvy-tripdata.csv")
Nov_2021 <- read.csv("/202111-divvy-tripdata.csv")

#====================================================
# STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE
#====================================================
# Compare column names each of the files
# While the names don't have to be in the same order, they DO need to match perfectly before we can use a command to join them into one file


colnames(Dec_2020)
colnames(Jan_2021)
colnames(Feb_2021)
colnames(Mar_2021)
colnames(Apr_2021)
colnames(May_2021)
colnames(Jun_2021)
colnames(Jul_2021)
colnames(Aug_2021)
colnames(Sep_2021)
colnames(Oct_2021)
colnames(Nov_2021)

# Renaming columns and using tibble to shorten the run results (as this will be the supposed going-forward table design for Divvy)

(Dec_2020 <- rename(Dec_2020
                    ,trip_id = ride_id
                    ,bikeid = rideable_type
                    ,start_time  = started_at
                    ,end_time  = ended_at
                    ,from_station_name = start_station_name
                    ,from_station_id = start_station_id
                    ,to_station_name = end_station_name
                    ,to_station_id = end_station_id
                    ,usertype = member_casual))

(Jan_2021 <- rename(Jan_2021
                    ,trip_id = ride_id
                    ,bikeid = rideable_type
                    ,start_time  = started_at
                    ,end_time  = ended_at
                    ,from_station_name = start_station_name
                    ,from_station_id = start_station_id
                    ,to_station_name = end_station_name
                    ,to_station_id = end_station_id
                    ,usertype = member_casual))

(Feb_2021 <- rename(Feb_2021
                    ,trip_id = ride_id
                    ,bikeid = rideable_type
                    ,start_time  = started_at
                    ,end_time  = ended_at
                    ,from_station_name = start_station_name
                    ,from_station_id = start_station_id
                    ,to_station_name = end_station_name
                    ,to_station_id = end_station_id
                    ,usertype = member_casual))

(Mar_2021 <- rename(Mar_2021
                    ,trip_id = ride_id
                    ,bikeid = rideable_type
                    ,start_time  = started_at
                    ,end_time  = ended_at
                    ,from_station_name = start_station_name
                    ,from_station_id = start_station_id
                    ,to_station_name = end_station_name
                    ,to_station_id = end_station_id
                    ,usertype = member_casual))

(Apr_2021 <- rename(Apr_2021
                    ,trip_id = ride_id
                    ,bikeid = rideable_type
                    ,start_time  = started_at
                    ,end_time  = ended_at
                    ,from_station_name = start_station_name
                    ,from_station_id = start_station_id
                    ,to_station_name = end_station_name
                    ,to_station_id = end_station_id
                    ,usertype = member_casual))

(May_2021 <- rename(May_2021
                    ,trip_id = ride_id
                    ,bikeid = rideable_type
                    ,start_time  = started_at
                    ,end_time  = ended_at
                    ,from_station_name = start_station_name
                    ,from_station_id = start_station_id
                    ,to_station_name = end_station_name
                    ,to_station_id = end_station_id
                    ,usertype = member_casual))

(Jun_2021 <- rename(Jun_2021
                    ,trip_id = ride_id
                    ,bikeid = rideable_type
                    ,start_time  = started_at
                    ,end_time  = ended_at
                    ,from_station_name = start_station_name
                    ,from_station_id = start_station_id
                    ,to_station_name = end_station_name
                    ,to_station_id = end_station_id
                    ,usertype = member_casual))

(Jul_2021 <- rename(Jul_2021
                    ,trip_id = ride_id
                    ,bikeid = rideable_type
                    ,start_time  = started_at
                    ,end_time  = ended_at
                    ,from_station_name = start_station_name
                    ,from_station_id = start_station_id
                    ,to_station_name = end_station_name
                    ,to_station_id = end_station_id
                    ,usertype = member_casual))

(Aug_2021 <- rename(Aug_2021
                    ,trip_id = ride_id
                    ,bikeid = rideable_type
                    ,start_time  = started_at
                    ,end_time  = ended_at
                    ,from_station_name = start_station_name
                    ,from_station_id = start_station_id
                    ,to_station_name = end_station_name
                    ,to_station_id = end_station_id
                    ,usertype = member_casual))

(Sep_2021 <- rename(Sep_2021
                    ,trip_id = ride_id
                    ,bikeid = rideable_type
                    ,start_time  = started_at
                    ,end_time  = ended_at
                    ,from_station_name = start_station_name
                    ,from_station_id = start_station_id
                    ,to_station_name = end_station_name
                    ,to_station_id = end_station_id
                    ,usertype = member_casual))

(Oct_2021 <- rename(Oct_2021
                    ,trip_id = ride_id
                    ,bikeid = rideable_type
                    ,start_time  = started_at
                    ,end_time  = ended_at
                    ,from_station_name = start_station_name
                    ,from_station_id = start_station_id
                    ,to_station_name = end_station_name
                    ,to_station_id = end_station_id
                    ,usertype = member_casual))

(Nov_2021 <- rename(Nov_2021
                    ,trip_id = ride_id
                    ,bikeid = rideable_type
                    ,start_time  = started_at
                    ,end_time  = ended_at
                    ,from_station_name = start_station_name
                    ,from_station_id = start_station_id
                    ,to_station_name = end_station_name
                    ,to_station_id = end_station_id
                    ,usertype = member_casual))

# Inspect the dataframes and look for incongruities before fixing them

str(Dec_2020)
str(Jan_2021)
str(Feb_2021)
str(Mar_2021)
str(Apr_2021)
str(May_2021)
str(Jun_2021)
str(Jul_2021)
str(Aug_2021)
str(Sep_2021)
str(Oct_2021)
str(Nov_2021)

# Convert to_station_id & from_station_id to character so that they can stack correctly

Dec_2020 <-  mutate(Dec_2020, from_station_id = as.character(from_station_id),
                    to_station_id = as.character(to_station_id))
Jan_2021 <-  mutate(Jan_2021, from_station_id = as.character(from_station_id),
                    to_station_id = as.character(to_station_id))
Feb_2021 <-  mutate(Feb_2021, from_station_id = as.character(from_station_id),
                    to_station_id = as.character(to_station_id))
Mar_2021 <-  mutate(Mar_2021, from_station_id = as.character(from_station_id),
                    to_station_id = as.character(to_station_id))
Apr_2021 <-  mutate(Apr_2021, from_station_id = as.character(from_station_id),
                    to_station_id = as.character(to_station_id))
May_2021 <-  mutate(May_2021, from_station_id = as.character(from_station_id),
                    to_station_id = as.character(to_station_id))
Jun_2021 <-  mutate(Jun_2021, from_station_id = as.character(from_station_id),
                    to_station_id = as.character(to_station_id))
Jul_2021 <-  mutate(Jul_2021, from_station_id = as.character(from_station_id),
                    to_station_id = as.character(to_station_id))
Aug_2021 <-  mutate(Aug_2021, from_station_id = as.character(from_station_id),
                    to_station_id = as.character(to_station_id))
Sep_2021 <-  mutate(Sep_2021, from_station_id = as.character(from_station_id),
                    to_station_id = as.character(to_station_id))
Oct_2021 <-  mutate(Oct_2021, from_station_id = as.character(from_station_id),
                    to_station_id = as.character(to_station_id))
Nov_2021 <-  mutate(Nov_2021, from_station_id = as.character(from_station_id),
                    to_station_id = as.character(to_station_id))


# Stack/combine individual month's data frames into one big data frame
all_trips <- bind_rows(Dec_2020, Jan_2021, Feb_2021, Mar_2021,
                       Apr_2021, May_2021, Jun_2021, Jul_2021, Aug_2021,
                       Sep_2021, Oct_2021, Nov_2021)

# Remove latitude and longitude fields
all_trips <- all_trips %>%  
  select(-c(start_lat, start_lng, end_lat, end_lng))

#======================================================
# STEP 3: CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS
#======================================================

# Inspecting the new table that has been created
colnames(all_trips)  #List of column names
nrow(all_trips)  #How many rows are in data frame?
dim(all_trips)  #Dimensions of the data frame?
head(all_trips)  #See the first 6 rows of data frame.  Also tail(all_trips)
str(all_trips)  #See list of columns and data types (numeric, character, etc)
summary(all_trips)  #Statistical summary of data. Mainly for numerics

# Seeing how many observations fall under each usertype
table(all_trips$usertype)

# Add columns that list the date, month, day, and year of each ride
# This will allow us to aggregate ride data for each month, day, or year ... before completing these operations we could only aggregate at the ride level
# https://www.statmethods.net/input/dates.html more on date formats in R found at that link
all_trips$date <- as.Date(all_trips$start_time) #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")

# Add a "ride_length" calculation to all_trips (in seconds)
# https://stat.ethz.ch/R-manual/R-devel/library/base/html/difftime.html
all_trips$ride_length <- difftime(all_trips$end_time,all_trips$start_time)

# Inspect the structure of the columns
str(all_trips)

# Convert "ride_length" from Factor to numeric so we can run calculations on the data
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)

# Remove "bad" data
# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative
all_trips_v2 <- all_trips[!(all_trips$from_station_name == "HQ QR" | all_trips$ride_length<0),]




#=====================================
# STEP 4: CONDUCT DESCRIPTIVE ANALYSIS
#=====================================
# Descriptive analysis on ride_length (all figures in seconds)
mean(all_trips_v2$ride_length) #straight average (total ride length / rides)
median(all_trips_v2$ride_length) #midpoint number in the ascending array of ride lengths
max(all_trips_v2$ride_length) #longest ride
min(all_trips_v2$ride_length) #shortest ride

# You can condense the four lines above to one line using summary() on the specific attribute
summary(all_trips_v2$ride_length)

#exporting summary stats to a csv
summary_stats1 <- all_trips_v2 %>%
  summary(all_trips_v2$ride_length)
write.csv(summary_stats1, file = '/summary_stats1.csv')

# Compare members and casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$usertype, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$usertype, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$usertype, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$usertype, FUN = min)

# See the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$usertype + 
            all_trips_v2$day_of_week, FUN = mean)

# Fixing the order of the days of the week
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, 
                                    levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

# Running the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$usertype + 
            all_trips_v2$day_of_week, FUN = mean)

# Analyze ridership data by type and weekday
all_trips_v2 %>% 
  mutate(weekday = wday(start_time, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(usertype, weekday) %>%  #groups by usertype and weekday
  summarise(number_of_rides = n()							#calculates the number of rides and average duration 
            ,average_duration = mean(ride_length)) %>% 		# calculates the average duration
  arrange(usertype, weekday)								# sorts in ascending order

# Exporting ridership data by weekday and type results to a csv file
ridership_weekday<-all_trips_v2 %>% 
  mutate(weekday = wday(start_time, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(weekday, usertype) %>%  #groups by usertype and weekday
  summarise(number_of_rides = n()							#calculates the number of rides and average duration 
            ,average_duration = mean(ride_length)) %>% 		# calculates the average duration
  arrange(weekday, usertype)								# sorts in ascending order
write.csv(ridership_weekday, file = '/ridership_weekday.csv')

# Exporting ridership data by month and type results to a csv file
ridership_month<-all_trips_v2 %>% 
  group_by(month, usertype) %>%  #groups by month and weekday
  summarise(number_of_rides = n()							#calculates the number of rides and average duration 
            ,average_duration = mean(ride_length)) %>% 		# calculates the average duration
  arrange(month, usertype)								# sorts in ascending order
write.csv(ridership_month, file = '/ridership_month.csv')

# Exporting ridership data by bike and type results to a csv file
ridership_biketype<-all_trips_v2 %>% 
  group_by(bikeid, usertype) %>%  #groups by month and weekday
  summarise(number_of_rides = n()							#calculates the number of rides and average duration 
            ,average_duration = mean(ride_length)) %>% 		# calculates the average duration
  arrange(bikeid, usertype)								# sorts in ascending order
write.csv(ridership_biketype, file = '/ridership_biketype.csv')


# Exporting Month and Weekday ridership data by bike type results to a csv file
ridership_biketype2<-all_trips_v2 %>% 
  mutate(weekday = wday(start_time, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(year, month, day, weekday, bikeid, usertype) %>%  #groups by month and weekday
  summarise(number_of_rides = n()							#calculates the number of rides and average duration 
            ,average_duration = mean(ride_length)) %>% 		# calculates the average duration
  arrange(year, month, day, weekday, bikeid, usertype)								# sorts in ascending order
write.csv(ridership_biketype2, file = '/ridership_biketype2.csv')



# Visualizing the number of rides by rider type
all_trips_v2 %>% 
  mutate(weekday = wday(start_time, label = TRUE)) %>% 
  group_by(weekday, usertype) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(weekday, usertype)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = usertype)) +
  geom_col(position = "dodge")

# Visualization for average duration
all_trips_v2 %>% 
  mutate(weekday = wday(start_time, label = TRUE)) %>% 
  group_by(usertype, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(usertype, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = usertype)) +
  geom_col(position = "dodge")

